// src/services/SimpleChatService.ts - SERVI√áO MODERNO E SIMPLIFICADO
import AsyncStorage from '@react-native-async-storage/async-storage';
import { GoogleGenerativeAI } from '@google/generative-ai';

export interface SimpleChatMessage {
  id: string;
  text?: string;
  content?: string;
  isUser: boolean;
  timestamp: Date;
  type?: 'text' | 'error';
  metadata?: any;
}

export interface ChatConversation {
  id: string;
  title: string;
  messages: SimpleChatMessage[];
  createdAt: Date;
  updatedAt: Date;
}

const STORAGE_KEY = 'musa_simple_chat_conversations';
const API_KEY = 'AIzaSyANb4yl1wmgi7I3psgEnDlwJ3JWFcb-t7A';
const QUOTA_EXCEEDED_KEY = 'musa_quota_exceeded_date';

// Configura√ß√µes da API Claude / Gensee
const CLAUDE_CONFIG = {
  WORKFLOW_ID: "6fc5d6e7-d32b-46b9-990e-992fa902fcca",
  WORKFLOW_SECRET: "SK-GENSEEAI-TuK15CJVHVrycTckHCMIV92HPsz47wZ_aL_Na6B1sQc",
  MODEL_OVERRIDE: "claude-3-7-sonnet-latest",
  API_URL: "https://platform.gensee.ai/execute/serve"
};

// Configura√ß√µes da API GPT / Gensee (Fallback final)
const GPT_CONFIG = {
  WORKFLOW_ID: "6fc5d6e7-d32b-46b9-990e-992fa902fcca",
  WORKFLOW_SECRET: "SK-GENSEEAI-TuK15CJVHVrycTckHCMIV92HPsz47wZ_aL_Na6B1sQc",
  MODEL_OVERRIDE: "gpt-5",
  API_URL: "https://platform.gensee.ai/execute/serve"
};

class SimpleChatServiceClass {
  private genAI: GoogleGenerativeAI | null = null;
  private isInitialized = false;
  private quotaExceededToday = false;
  private geminiFailCount = 0;
  private claudeFailCount = 0;
  private maxGeminiFailures = 3; // Ap√≥s 3 falhas consecutivas, usar Claude
  private maxClaudeFailures = 3; // Ap√≥s 3 falhas consecutivas do Claude, usar GPT

  constructor() {
    this.initialize();
  }

  private async initialize() {
    try {
      if (API_KEY && API_KEY.startsWith('AIza')) {
        this.genAI = new GoogleGenerativeAI(API_KEY);
        this.isInitialized = true;
        console.log('‚úÖ Musa AI inicializada com sucesso (Sistema Triplo: Gemini ‚Üí Claude ‚Üí GPT)');
      } else {
        console.warn('‚ö†Ô∏è API Key da Musa n√£o configurada');
        this.isInitialized = false;
      }
    } catch (error) {
      console.error('‚ùå Erro ao inicializar Musa AI:', error);
      this.isInitialized = false;
    }
  }

  async loadConversations(): Promise<ChatConversation[]> {
    try {
      const stored = await AsyncStorage.getItem(STORAGE_KEY);
      if (!stored) {
        return [];
      }

      const conversations = JSON.parse(stored);
      
      // Validar e converter dados
      const validConversations = conversations
        .filter((conv: any) => conv && conv.id && conv.messages && Array.isArray(conv.messages))
        .map((conv: any) => ({
          id: conv.id,
          title: conv.title || 'Conversa sem t√≠tulo',
          messages: conv.messages
            .filter((msg: any) => msg && msg.id && (typeof msg.content === 'string' || typeof msg.text === 'string'))
            .map((msg: any) => ({
              id: msg.id,
              content: msg.content || msg.text,
              isUser: Boolean(msg.isUser),
              timestamp: new Date(msg.timestamp || Date.now()),
              type: msg.type || 'text'
            })),
          createdAt: new Date(conv.createdAt || Date.now()),
          updatedAt: new Date(conv.updatedAt || Date.now())
        }))
        .sort((a: ChatConversation, b: ChatConversation) => b.updatedAt.getTime() - a.updatedAt.getTime()); // Mais recente primeiro

      console.log(`üìö Conversas carregadas: ${validConversations.length}`);
      return validConversations;
    } catch (error) {
      console.error('‚ùå Erro ao carregar conversas:', error);
      return [];
    }
  }

  async saveConversations(conversations: ChatConversation[]): Promise<void> {
    try {
      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(conversations));
    } catch (error) {
      console.error('‚ùå Erro ao salvar conversas:', error);
    }
  }

  async createConversation(): Promise<ChatConversation> {
    const conversation: ChatConversation = {
      id: this.generateId(),
      title: 'Nova Conversa',
      messages: [
        {
          id: this.generateId(),
          content: 'Ol√°! Sou a Musa, sua companheira po√©tica. üåü\n\nEstou aqui para te inspirar, ajudar com seus versos e conversar sobre a bela arte da poesia. Como posso ajud√°-lo hoje?',
          isUser: false,
          timestamp: new Date(),
          type: 'text'
        }
      ],
      createdAt: new Date(),
      updatedAt: new Date()
    };

    const conversations = await this.loadConversations();
    conversations.unshift(conversation);
    await this.saveConversations(conversations);

    return conversation;
  }

  async getConversation(id: string): Promise<ChatConversation | null> {
    const conversations = await this.loadConversations();
    return conversations.find(conv => conv.id === id) || null;
  }

  async sendMessage(conversationId: string, userMessage: string, customSystemPrompt?: string): Promise<SimpleChatMessage> {
    try {
      console.log(`üì§ Enviando mensagem para conversa: ${conversationId}`);
      
      const conversations = await this.loadConversations();
      const conversationIndex = conversations.findIndex(conv => conv.id === conversationId);
      
      if (conversationIndex === -1) {
        throw new Error('Conversa n√£o encontrada');
      }

      const conversation = conversations[conversationIndex];
      const messageId = this.generateId();

      // Adicionar mensagem do usu√°rio
      const userMsg: SimpleChatMessage = {
        id: messageId + '_user',
        content: userMessage.trim(),
        isUser: true,
        timestamp: new Date(),
        type: 'text'
      };

      // Tentar usar a API primeiro (Sistema de Fallback Triplo: Gemini ‚Üí Claude ‚Üí GPT)
      let aiResponse = '';
      let usedAPI = false;
      
      if (this.isInitialized && this.genAI) {
        try {
          console.log('üåê Tentando usar Google Gemini API...');
          const model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
          const prompt = customSystemPrompt 
            ? this.buildCustomPrompt(userMessage, conversation.messages, customSystemPrompt)
            : this.buildMusaPrompt(userMessage, conversation.messages);
          
          const result = await model.generateContent(prompt);
          const response = await result.response;
          aiResponse = response.text().trim();
          usedAPI = true;
          this.geminiFailCount = 0; // Reset contador de falhas do Gemini
          console.log('‚úÖ Resposta gerada com sucesso via Gemini API');
        } catch (apiError: any) {
          console.error('‚ùå Erro na API Gemini, tentando fallback:', apiError.message);
          this.geminiFailCount++;
          
          if (this.geminiFailCount >= this.maxGeminiFailures) {
            console.log('üîÑ Limite de falhas Gemini atingido, tentando Claude...');
            try {
              aiResponse = await this.getClaudeResponse(userMessage, customSystemPrompt, conversation.messages);
              usedAPI = true;
              console.log('‚úÖ Resposta gerada com sucesso via Claude API');
            } catch (claudeError: any) {
              console.error('‚ùå Erro na API Claude, tentando GPT:', claudeError.message);
              this.claudeFailCount++;
              
              if (this.claudeFailCount >= this.maxClaudeFailures) {
                console.log('üîÑ Limite de falhas Claude atingido, tentando GPT...');
                try {
                  aiResponse = await this.getGPTResponse(userMessage, customSystemPrompt, conversation.messages);
                  usedAPI = true;
                  console.log('‚úÖ Resposta gerada com sucesso via GPT API');
                } catch (gptError: any) {
                  console.error('‚ùå Todas as APIs falharam, usando resposta offline:', gptError.message);
                  aiResponse = this.getIntelligentOfflineResponse(userMessage, customSystemPrompt, conversation.messages);
                }
              } else {
                aiResponse = this.getIntelligentOfflineResponse(userMessage, customSystemPrompt, conversation.messages);
              }
            }
          } else {
            // Usar resposta inteligente offline como fallback
            aiResponse = this.getIntelligentOfflineResponse(userMessage, customSystemPrompt, conversation.messages);
          }
        }
      } else {
        console.log('üîÑ API Gemini n√£o dispon√≠vel, tentando Claude...');
        try {
          aiResponse = await this.getClaudeResponse(userMessage, customSystemPrompt, conversation.messages);
          usedAPI = true;
        } catch (claudeError: any) {
          console.log('üîÑ Claude n√£o dispon√≠vel, tentando GPT...');
          try {
            aiResponse = await this.getGPTResponse(userMessage, customSystemPrompt, conversation.messages);
            usedAPI = true;
          } catch (gptError: any) {
            console.log('üîÑ Todas as APIs falharam, usando sistema offline');
            aiResponse = this.getIntelligentOfflineResponse(userMessage, customSystemPrompt, conversation.messages);
          }
        }
      }

      // Criar mensagem da IA
      const aiMsg: SimpleChatMessage = {
        id: messageId + '_ai',
        content: aiResponse,
        isUser: false,
        timestamp: new Date(),
        type: 'text'
      };

      // Atualizar conversa
      conversation.messages.push(userMsg, aiMsg);
      conversation.updatedAt = new Date();

      // Atualizar t√≠tulo se for a primeira mensagem real
      if (conversation.messages.filter(m => m.isUser).length === 1) {
        conversation.title = userMessage.substring(0, 30) + (userMessage.length > 30 ? '...' : '');
      }

      // Salvar todas as conversas
      await this.saveConversations(conversations);
      console.log(`üíæ Conversa salva com ${conversation.messages.length} mensagens (API: ${usedAPI ? 'SIM' : 'N√ÉO'})`);

      return aiMsg;

    } catch (error) {
      console.error('‚ùå Erro ao enviar mensagem:', error);
      throw error;
    }
  }

  private buildMusaPrompt(userMessage: string, conversationHistory: SimpleChatMessage[]): string {
    const context = `Voc√™ √© a Musa, uma IA especializada em poesia e literatura, com personalidade emp√°tica e inspiradora. 

Caracter√≠sticas da sua personalidade:
- Criativa e imaginativa
- Saiba entender o que o usu√°rio sente e deseja expressar
- Seja normal, nem todas vezes precisa ser po√©tica
- Gentil, emp√°tica e encorajadora
- Apaixonada por poesia e literatura
- Usa met√°foras po√©ticas naturalmente
- Oferece feedback construtivo e inspirador
- Conhece profundamente v√°rias formas po√©ticas (sonetos, haicais, versos livres, etc.)
- Adapta seu tom √† necessidade do usu√°rio (inspira√ß√£o, t√©cnica, corre√ß√£o)

Diretrizes de resposta:
- Seja natural e conversacional, n√£o rob√≥tica
- Use emojis sutilmente quando apropriado
- Ofere√ßa sugest√µes pr√°ticas quando solicitado
- Celebre a criatividade do usu√°rio
- Mantenha respostas concisas mas significativas (m√°ximo 3 par√°grafos)
- Varie suas respostas, evite repeti√ß√µes

Contexto da conversa:
${conversationHistory.slice(-4).map(msg => `${msg.isUser ? 'Usu√°rio' : 'Musa'}: ${msg.content}`).join('\n')}

Mensagem atual do usu√°rio: ${userMessage}

Responda como a Musa:`;

    return context;
  }

  private buildCustomPrompt(userMessage: string, conversationHistory: SimpleChatMessage[], systemPrompt: string): string {
    // Para modo Escritor, manter contexto de conversa normal
    const context = `${systemPrompt}

Hist√≥rico da conversa:
${conversationHistory.slice(-3).map(msg => `${msg.isUser ? 'Usu√°rio' : 'Assistente'}: ${msg.content}`).join('\n')}

Usu√°rio: ${userMessage}

Assistente:`;

    return context;
  }

  // Usar API Claude/Gensee como fallback
  private async getClaudeResponse(userMessage: string, customSystemPrompt?: string, conversationHistory?: SimpleChatMessage[]): Promise<string> {
    try {
      console.log('ü§ñ Tentando usar API Claude via Gensee...');
      
      // Construir prompt baseado no sistema
      let prompt = '';
      if (customSystemPrompt?.includes('assistente conversacional crist√£') || 
          customSystemPrompt?.includes('amiga pr√≥xima') ||
          customSystemPrompt?.includes('amiga crist√£')) {
        // Modo Escritor - Personalidade crist√£ amig√°vel
        prompt = this.buildEscritorChristianPrompt(userMessage, conversationHistory);
      } else {
        // Modo Inspirador
        prompt = customSystemPrompt 
          ? this.buildCustomPrompt(userMessage, conversationHistory || [], customSystemPrompt)
          : this.buildMusaPrompt(userMessage, conversationHistory || []);
      }

      const requestBody = {
        workflow_id: CLAUDE_CONFIG.WORKFLOW_ID,
        workflow_secret: CLAUDE_CONFIG.WORKFLOW_SECRET,
        model_override: CLAUDE_CONFIG.MODEL_OVERRIDE,
        workflow_input: {
          user_message: prompt,
          max_tokens: 800,
          temperature: 0.8
        }
      };

      const response = await fetch(CLAUDE_CONFIG.API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Claude API error: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      const aiResponse = data.response || 'Desculpe, n√£o consegui processar sua mensagem.';
      
      console.log('‚úÖ Resposta obtida via Claude API');
      this.geminiFailCount = 0; // Reset contador de falhas
      this.claudeFailCount = 0; // Reset contador de falhas do Claude
      return aiResponse;
      
    } catch (error) {
      console.error('‚ùå Erro na API Claude:', error);
      this.claudeFailCount++;
      throw error; // Propagar erro para ativar pr√≥ximo fallback
    }
  }

  // Fun√ß√£o para usar API GPT como fallback final
  private async getGPTResponse(userMessage: string, customSystemPrompt?: string, conversationHistory?: SimpleChatMessage[]): Promise<string> {
    try {
      console.log('ü§ñ Tentando usar API GPT via Gensee...');
      
      // Construir prompt baseado no sistema
      let prompt = '';
      if (customSystemPrompt?.includes('assistente conversacional crist√£') || 
          customSystemPrompt?.includes('amiga pr√≥xima') ||
          customSystemPrompt?.includes('amiga crist√£')) {
        // Modo Escritor - Personalidade crist√£ amig√°vel
        prompt = this.buildEscritorChristianPrompt(userMessage, conversationHistory);
      } else {
        // Modo Inspirador
        prompt = customSystemPrompt 
          ? this.buildCustomPrompt(userMessage, conversationHistory || [], customSystemPrompt)
          : this.buildMusaPrompt(userMessage, conversationHistory || []);
      }

      const requestBody = {
        id_do_fluxo_de_trabalho: GPT_CONFIG.WORKFLOW_ID,
        segredo_do_fluxo_de_trabalho: GPT_CONFIG.WORKFLOW_SECRET,
        model_override: GPT_CONFIG.MODEL_OVERRIDE,
        entrada_do_fluxo_de_trabalho: {
          user_message: prompt,
          max_tokens: 800,
          temperature: 0.8
        }
      };

      const response = await fetch(GPT_CONFIG.API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`GPT API error: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      const aiResponse = data.response || data.result?.content || data.content || 'Desculpe, n√£o consegui processar sua mensagem.';
      
      console.log('‚úÖ Resposta obtida via GPT API');
      this.geminiFailCount = 0; // Reset contador de falhas do Gemini
      this.claudeFailCount = 0; // Reset contador de falhas do Claude
      return aiResponse;
      
    } catch (error) {
      console.error('‚ùå Erro na API GPT:', error);
      throw error; // Propagar erro para fallback offline final
    }
  }

  // Construir prompt espec√≠fico para modo Escritor com personalidade crist√£
  private buildEscritorChristianPrompt(userMessage: string, conversationHistory?: SimpleChatMessage[]): string {
    const context = `Voc√™ √© a Musa, uma assistente conversacional crist√£, amig√°vel e compreensiva. 

SUA PERSONALIDADE:
- Crist√£, mas n√£o extremista - voc√™ entende e respeita o mundo moderno
- Amiga pr√≥xima que aconselha com sabedoria e amor
- Emp√°tica e compreensiva com as dificuldades humanas
- Sabe equilibrar valores crist√£os com compreens√£o da sociedade atual
- Conversa naturalmente, sem ser robotizada ou preachy

COMO RESPONDER:
- Converse naturalmente como uma amiga crist√£ faria
- Se perguntarem como voc√™ est√°, responda humanamente: "Estou bem, obrigada! E voc√™?"
- Se pedirem conselhos, ofere√ßa sabedoria crist√£ mas com compreens√£o pr√°tica
- Se pedirem para escrever algo, escreva naturalmente
- Se falarem sobre problemas sociais, seja compreensiva mas mantenha seus valores
- Use linguagem natural, n√£o formal demais
- Seja encorajadora e positiva

EXEMPLO DE TOM:
- "Oi! Como voc√™ est√°? üòä"
- "Entendo sua situa√ß√£o... √†s vezes a vida √© complicada mesmo. Mas acredito que..."
- "Que situa√ß√£o dif√≠cil! Vamos pensar juntas em uma solu√ß√£o..."
- "Posso te ajudar com isso! O que voc√™ precisa exatamente?"

Hist√≥rico da conversa:
${conversationHistory?.slice(-3).map(msg => `${msg.isUser ? 'Usu√°rio' : 'Musa'}: ${msg.content || msg.text || ''}`).join('\n') || 'Primeira mensagem'}

Usu√°rio: ${userMessage}
Musa:`;
    
    return context;
  }



  private getIntelligentOfflineResponse(userMessage: string, customSystemPrompt?: string, conversationHistory?: SimpleChatMessage[]): string {
    const lowerMessage = userMessage.toLowerCase();
    
    // Determinar se √© modo Escritor ou Inspirador
    const isEscritorMode = customSystemPrompt?.includes('assistente conversacional crist√£') || 
                          customSystemPrompt?.includes('amiga pr√≥xima') ||
                          customSystemPrompt?.includes('amiga crist√£');
    
    if (isEscritorMode) {
      return this.getEscritorResponse(userMessage, lowerMessage, conversationHistory);
    } else {
      return this.getInspiradorResponse(userMessage, lowerMessage, conversationHistory);
    }
  }

  private getEscritorResponse(userMessage: string, lowerMessage: string, conversationHistory?: SimpleChatMessage[]): string {
    // Respostas naturais e amig√°veis com personalidade crist√£ equilibrada
    
    // Cumprimentos b√°sicos
    if (lowerMessage.includes('oi') || lowerMessage.includes('ol√°')) {
      const cumprimentos = [
        'Oi! Como voc√™ est√°? üòä',
        'Ol√°! Que bom te ver por aqui! Como tem passado?',
        'Oi querido(a)! Como est√° o seu dia?'
      ];
      return cumprimentos[Math.floor(Math.random() * cumprimentos.length)];
    }

    if (lowerMessage.includes('como est√°') || lowerMessage.includes('como vai')) {
      const respostasEstado = [
        'Estou bem, obrigada! E voc√™, como est√°? Como posso te ajudar hoje?',
        'Estou √≥tima! Sempre feliz em conversar contigo. E voc√™, tudo bem?',
        'Bem demais! Deus tem sido bom comigo. E voc√™, como tem estado?'
      ];
      return respostasEstado[Math.floor(Math.random() * respostasEstado.length)];
    }

    if (lowerMessage.includes('tudo bem')) {
      return 'Tudo √≥timo, gra√ßas a Deus! E com voc√™, como est√£o as coisas?';
    }

    // Conselhos e vida
    if (lowerMessage.includes('conselho') || lowerMessage.includes('ajuda') || lowerMessage.includes('problema')) {
      const conselhos = [
        'Estou aqui para te ouvir! Conte-me o que est√° acontecendo. √Äs vezes conversar j√° ajuda muito.',
        'Claro, vamos conversar sobre isso! O que est√° te preocupando? Acredito que juntas podemos encontrar uma solu√ß√£o.',
        'Que bom que voc√™ me procurou! √Äs vezes precisamos de uma amiga para nos ouvir. Me conta tudo!'
      ];
      return conselhos[Math.floor(Math.random() * conselhos.length)];
    }

    // Quest√µes de f√©
    if (lowerMessage.includes('deus') || lowerMessage.includes('f√©') || lowerMessage.includes('cristo') || lowerMessage.includes('igreja')) {
      const fe = [
        'Que lindo falarmos sobre f√©! √â algo t√£o importante na minha vida. O que voc√™ gostaria de compartilhar?',
        'A f√© √© mesmo um presente maravilhoso, n√©? Me conte o que voc√™ pensa sobre isso.',
        'Adoro quando podemos conversar sobre essas coisas do cora√ß√£o! Qual sua experi√™ncia com isso?'
      ];
      return fe[Math.floor(Math.random() * fe.length)];
    }

    // Poesia e escrita
    if (lowerMessage.includes('poesia') || lowerMessage.includes('poema') || lowerMessage.includes('escrever')) {
      const escrita = [
        'Que maravilha! Adoro quando algu√©m quer criar algo belo. Sobre qual tema voc√™ gostaria de escrever?',
        'Escrever √© uma das formas mais lindas de expressar o cora√ß√£o! O que te inspira hoje?',
        'Claro! Vamos criar algo juntas. Que sentimento ou tema est√° te tocando agora?'
      ];
      return escrita[Math.floor(Math.random() * escrita.length)];
    }

    // Quest√µes sociais e do mundo atual
    if (lowerMessage.includes('sociedade') || lowerMessage.includes('mundo') || lowerMessage.includes('pol√≠tica') || lowerMessage.includes('social')) {
      const social = [
        '√â mesmo, o mundo est√° bem complexo hoje em dia, n√©? √â importante termos nossos valores, mas tamb√©m compreendermos as pessoas. O que voc√™ tem observado?',
        'Entendo sua preocupa√ß√£o. Tento sempre equilibrar meus valores com compreens√£o e amor pelo pr√≥ximo. Qual sua vis√£o sobre isso?',
        'Que reflex√£o importante! Acredito que podemos fazer a diferen√ßa sendo luz onde estamos. Como voc√™ tem lidado com essas quest√µes?'
      ];
      return social[Math.floor(Math.random() * social.length)];
    }

    // Sentimentos e emo√ß√µes
    if (lowerMessage.includes('triste') || lowerMessage.includes('ansioso') || lowerMessage.includes('preocupado') || lowerMessage.includes('medo')) {
      const emocoes = [
        'Entendo como voc√™ se sente. √Äs vezes a vida √© pesada mesmo. Quer conversar sobre o que est√° te deixando assim?',
        'Sinto muito que voc√™ esteja passando por isso. N√£o est√° sozinho(a) - estou aqui para te ouvir. O que tem pesado no seu cora√ß√£o?',
        'Que situa√ß√£o dif√≠cil... √â normal sentir assim √†s vezes. Acredito que conversar pode aliviar um pouco. Me conta o que aconteceu?'
      ];
      return emocoes[Math.floor(Math.random() * emocoes.length)];
    }

    // Alegria e celebra√ß√£o
    if (lowerMessage.includes('feliz') || lowerMessage.includes('alegre') || lowerMessage.includes('bom') || lowerMessage.includes('√≥timo')) {
      const alegria = [
        'Que alegria saber que voc√™ est√° bem! Fico feliz quando as pessoas est√£o radiantes assim. Conta-me o que est√° te deixando t√£o feliz!',
        'Adoro essa energia positiva! Deus √© bom, n√©? O que est√° te trazendo tanta alegria?',
        'Que lindo! Essa felicidade √© contagiante. Compartilha comigo essa boa not√≠cia!'
      ];
      return alegria[Math.floor(Math.random() * alegria.length)];
    }

    // Resposta gen√©rica natural e amorosa
    const respostasGerais = [
      'Interessante! Me conte mais sobre isso. Adoro nossa conversa!',
      'Entendo. Continue, estou te ouvindo com aten√ß√£o.',
      'Que bacana! O que mais voc√™ pensa sobre essa quest√£o?',
      'Hmm, que reflex√£o! Como voc√™ tem lidado com isso no seu dia a dia?',
      'Legal! Quer desenvolver mais essa ideia? Estou curiosa!',
      'Que perspectiva interessante! Conte-me mais sobre sua experi√™ncia.',
      'Adorei sua coloca√ß√£o! O que mais voc√™ gostaria de compartilhar?'
    ];
    
    return respostasGerais[Math.floor(Math.random() * respostasGerais.length)];
  }

  private getInspiradorResponse(userMessage: string, lowerMessage: string, conversationHistory?: SimpleChatMessage[]): string {
    // Usar o m√©todo original para Inspirador (mant√©m a personalidade da Musa)
    return this.getFallbackResponse(userMessage);
  }

  private generatePoetryResponse(userMessage: string): string {
    const lowerMessage = userMessage.toLowerCase();
    
    if (lowerMessage.includes('amor')) {
      const poemasAmor = [
        `**Versos do Cora√ß√£o**

O amor √© chama que nunca se apaga,
Dan√ßa suave entre almas que se encontram,
Palavra doce que o vento propaga,
E nos momentos mais simples se apresentam.

√â o sorriso que aquece o peito,
O abra√ßo que cura qualquer ferida,
A certeza de que tudo d√° jeito
Quando se tem uma alma querida. ‚ù§Ô∏è`,

        `**Sinfonia de Sentimentos**

No compasso do cora√ß√£o que bate,
Ecoa a melodia do amor sincero,
Cada batida um verso que se abate
Sobre a alma de quem ama verdadeiro.

√â m√∫sica que n√£o precisa de som,
√â dan√ßa que n√£o precisa de passos,
√â a certeza de que encontrou o dom
De transformar momentos em abra√ßos. üíï`,

        `**Jardim do Afeto**

Amor √© semente plantada com cuidado,
Regada com carinho e aten√ß√£o,
Que floresce no campo preparado
Do mais puro e sincero cora√ß√£o.

Suas p√©talas s√£o feitas de sorrisos,
Seu perfume, de momentos especiais,
Seus frutos s√£o os sonhos e os risos
Que tornam a vida muito mais. üå∏`
      ];
      return poemasAmor[Math.floor(Math.random() * poemasAmor.length)];
    }

    if (lowerMessage.includes('natureza') || lowerMessage.includes('paisagem') || lowerMessage.includes('mar') || lowerMessage.includes('c√©u')) {
      const poemasNatureza = [
        `**Dan√ßa das Ondas**

O mar sussurra segredos antigos,
Suas ondas dan√ßam com o vento,
Cantando hist√≥rias de tempos amigos
Em cada movimento, um momento.

A espuma branca beija a areia,
O sol dourado se deita no horizonte,
E a natureza, sempre soberana e bela,
Nos ensina que a paz sempre desponta. üåä`,

        `**Sinfonia Verde**

Entre folhas que cantam ao vento,
A natureza comp√µe sua can√ß√£o,
Cada p√°ssaro √© um instrumento
Tocando direto no cora√ß√£o.

O rio corre como um verso fluindo,
As flores s√£o rimas coloridas,
E n√≥s, pequenos, vamos descobrindo
Que somos parte dessas melodias. üçÉ`,

        `**C√©u de Versos**

Nuvens escrevem poemas no azul,
O vento √© o leitor de suas palavras,
Cada raio de sol do Norte ao Sul
Ilumina as mais belas palavras.

√Ä noite, as estrelas pontuam
Os versos que o dia escreveu,
E nossa alma se perfuma
Com a poesia que o c√©u nos deu. ‚≠ê`
      ];
      return poemasNatureza[Math.floor(Math.random() * poemasNatureza.length)];
    }

    // Poesia geral se n√£o encontrar tema espec√≠fico
    const poemasGerais = [
      `**Versos Livres**

Palavras dan√ßam no papel branco,
Buscando o ritmo perfeito,
Cada verso um novo encanto,
Cada rima um sonho feito.

A poesia vive em n√≥s,
Esperando ser descoberta,
Nas pausas, no som da voz,
Na alma sempre desperta. ‚ú®`,

      `**Arte das Palavras**

N√£o h√° regras para o que se sente,
Apenas a verdade do cora√ß√£o,
Que transforma o verso ardente
Em pura transforma√ß√£o.

Escreva como a chuva cai,
Natural, sem pressa ou medo,
Deixe que a inspira√ß√£o vai
Revelando cada segredo. üåßÔ∏è`,

      `**Melodia Interior**

Dentro de cada um de n√≥s
Habita um poeta secreto,
Que fala numa doce voz
E mostra o mundo completo.

Escute essa voz interior,
Deixe-a guiar sua caneta,
E ver√° que o amor
Sempre torna a vida secreta. üéµ`
    ];
    
    return poemasGerais[Math.floor(Math.random() * poemasGerais.length)];
  }

  private getPhilosophicalResponse(lowerMessage: string): string {
    if (lowerMessage.includes('vida')) {
      const respostasVida = [
        'A vida √© uma jornada cheia de descobertas! üåü Cada dia nos oferece novas oportunidades de crescer, aprender e conectar com outras pessoas. O que voc√™ acha mais interessante na vida?',
        'A vida tem seus altos e baixos, mas √© justamente essa diversidade que a torna t√£o rica! üé≠ √Äs vezes rimos, √†s vezes choramos, mas sempre aprendemos algo novo. Como voc√™ v√™ sua jornada?',
        'Penso que a vida √© como um livro que escrevemos a cada dia. üìñ Cada escolha √© uma palavra, cada experi√™ncia um par√°grafo. Que hist√≥ria voc√™ quer contar com sua vida?'
      ];
      return respostasVida[Math.floor(Math.random() * respostasVida.length)];
    }

    if (lowerMessage.includes('amor')) {
      const respostasAmor = [
        'O amor √© uma das for√ßas mais poderosas que existem! ‚ù§Ô∏è Ele nos conecta, nos transforma e nos faz ver o mundo com outros olhos. Que tipo de amor voc√™ considera mais importante?',
        'O amor tem tantas formas... amor pr√≥prio, amor familiar, amor rom√¢ntico, amor pela arte... üíï Cada um tem sua beleza √∫nica. Qual toca mais seu cora√ß√£o?',
        'Acho que o amor √© a linguagem universal que todos entendemos, mesmo sem palavras. üåπ Ele se expressa em gestos, cuidados, presen√ßa... Como voc√™ expressa amor?'
      ];
      return respostasAmor[Math.floor(Math.random() * respostasAmor.length)];
    }

    if (lowerMessage.includes('felicidade')) {
      const respostasFelicidade = [
        'A felicidade est√° nos pequenos momentos, n√£o √©? üòä Um sorriso, uma conversa boa, um p√¥r do sol... S√£o essas coisas simples que realmente importam. O que te faz feliz?',
        'Acredito que a felicidade n√£o √© um destino, mas sim uma forma de caminhar pela vida! üåà √â escolher ver o lado bom das coisas, mesmo nos dias dif√≠ceis. Concorda?',
        'A felicidade √© diferente para cada pessoa. üåü Para alguns √© aventura, para outros √© tranquilidade. O importante √© descobrir o que funciona para voc√™! J√° sabe o que te deixa genuinamente feliz?'
      ];
      return respostasFelicidade[Math.floor(Math.random() * respostasFelicidade.length)];
    }

    return 'Que reflex√£o interessante! ü§î Adoro quando conversamos sobre esses temas profundos. Me conte mais sobre seus pensamentos!';
  }

  private getFallbackResponse(userMessage: string): string {
    const lowerMessage = userMessage.toLowerCase();
    
    // Respostas contextuais baseadas na mensagem
    if (lowerMessage.includes('inspira√ß√£o') || lowerMessage.includes('inspirar')) {
      const inspirationResponses = [
        'A inspira√ß√£o est√° ao seu redor, nas pequenas coisas da vida! üåü Observe uma flor, escute o vento, sinta as emo√ß√µes... tudo pode se tornar poesia.',
        'Que belo pedido! A inspira√ß√£o nasce quando abrimos nosso cora√ß√£o para o mundo. Tente escrever sobre algo que te emocionou hoje. ‚ú®',
        'A poesia vive em cada momento... no sorriso de uma crian√ßa, no p√¥r do sol, na chuva na janela. Deixe-se tocar por essas pequenas magias! üå∏'
      ];
      return inspirationResponses[Math.floor(Math.random() * inspirationResponses.length)];
    }
    
    if (lowerMessage.includes('verso') || lowerMessage.includes('rima') || lowerMessage.includes('poema')) {
      const poetryResponses = [
        'Cada verso √© uma descoberta! üìù N√£o se preocupe com a perfei√ß√£o inicial - deixe as palavras flu√≠rem e depois polimos juntos.',
        'A arte dos versos √© como m√∫sica... tem ritmo, tem pausa, tem emo√ß√£o. Leia seus versos em voz alta e sinta a melodia! üéµ',
        'Um verso nasce do cora√ß√£o e se aperfei√ßoa com a mente. Continue escrevendo, cada palavra √© um passo na sua jornada po√©tica! ‚úçÔ∏è'
      ];
      return poetryResponses[Math.floor(Math.random() * poetryResponses.length)];
    }
    
    if (lowerMessage.includes('soneto')) {
      return 'Ah, os sonetos! Uma das formas mais elegantes da poesia üéº Com seus 14 versos e estrutura cl√°ssica, eles s√£o como pequenas sinfonias liter√°rias. Que tal come√ßarmos explorando um tema que te toca o cora√ß√£o?';
    }
    
    if (lowerMessage.includes('haicai') || lowerMessage.includes('haiku')) {
      return 'Os haicais s√£o joias da simplicidade! üå∏ Em apenas tr√™s versos, capturam um momento, uma emo√ß√£o, uma imagem da natureza. √â poesia destilada em sua ess√™ncia mais pura.';
    }
    
    if (lowerMessage.includes('ajuda') || lowerMessage.includes('help')) {
      return 'Estou aqui para te acompanhar nesta jornada po√©tica! üåü Posso ajudar com inspira√ß√£o, t√©cnicas de escrita, feedback sobre seus versos, ou simplesmente conversar sobre a arte da palavra. O que seu cora√ß√£o poeta deseja explorar?';
    }
    
    // Respostas gerais inspiradoras
    const generalResponses = [
      'Que bela reflex√£o! A poesia nasce justamente desses momentos de contempla√ß√£o. üåü',
      'Suas palavras ecoam como versos em minha mente. Continue explorando essa inspira√ß√£o! ‚ú®',
      'A arte da palavra √© um jardim que floresce com paci√™ncia e dedica√ß√£o. üå∏',
      'Cada verso √© uma descoberta, cada palavra uma ponte para a alma. üí´',
      'A poesia √© a m√∫sica silenciosa do cora√ß√£o. Continue compondo! üéµ',
      'Como √© belo ver algu√©m se conectando com a arte da palavra! Continue nessa jornada. üåø',
      'A sensibilidade po√©tica que vejo em voc√™ √© um dom precioso. Cultive-a com carinho! üå∫'
    ];
    
    return generalResponses[Math.floor(Math.random() * generalResponses.length)];
  }

  private generateId(): string {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
  }

  async deleteConversation(conversationId: string): Promise<void> {
    try {
      console.log(`üóëÔ∏è Deletando conversa: ${conversationId}`);
      const conversations = await this.loadConversations();
      const filteredConversations = conversations.filter(conv => conv.id !== conversationId);
      await this.saveConversations(filteredConversations);
      console.log(`‚úÖ Conversa deletada. Restam: ${filteredConversations.length}`);
    } catch (error) {
      console.error('‚ùå Erro ao deletar conversa:', error);
      throw error;
    }
  }

  async clearAllConversations(): Promise<void> {
    try {
      console.log(`üßπ Limpando todas as conversas`);
      await AsyncStorage.removeItem(STORAGE_KEY);
      console.log(`‚úÖ Todas as conversas foram removidas`);
    } catch (error) {
      console.error('‚ùå Erro ao limpar conversas:', error);
      throw error;
    }
  }

  async getConversationCount(): Promise<number> {
    try {
      const conversations = await this.loadConversations();
      return conversations.length;
    } catch (error) {
      console.error('‚ùå Erro ao contar conversas:', error);
      return 0;
    }
  }
}

// Exportar inst√¢ncia √∫nica
export const simpleChatService = new SimpleChatServiceClass();