import AsyncStorage from '@react-native-async-storage/async-storage';
import { EnhancedAchievementService } from './EnhancedAchievementService';
import { AchievementViewService } from './AchievementViewService';
import { EnhancedProfileService } from './EnhancedProfileService';

export class AchievementResetService {

  /**
   * Resetar completamente o sistema de conquistas
   * - Limpa todos os pontos/XP
   * - Remove status de desbloqueio de todas as conquistas
   * - Limpa hist√≥rico de visualiza√ß√µes (todas as conquistas voltam a aparecer como bloqueadas)
   */
  static async resetEntireAchievementSystem(): Promise<void> {
    try {
      console.log('üîÑ Iniciando reset completo do sistema de conquistas...');

      // 1. Resetar progresso das conquistas (pontos/XP)
      await EnhancedAchievementService.resetAchievements();
      console.log('‚úÖ Progresso das conquistas resetado');

      // 2. Limpar hist√≥rico de visualiza√ß√µes (todas as conquistas voltam a aparecer como bloqueadas)
      await AchievementViewService.clearViewHistory();
      console.log('‚úÖ Hist√≥rico de visualiza√ß√µes limpo');

      // 3. Resetar pontos no perfil do usu√°rio (se existir)
      await this.resetProfilePoints();
      console.log('‚úÖ Pontos do perfil resetados');

      console.log('üéâ Sistema de conquistas completamente resetado!');
      console.log('üìä Todas as conquistas agora aparecem como bloqueadas novamente');
      console.log('üí∞ Todos os pontos/XP foram zerados');

    } catch (error) {
      console.error('‚ùå Erro ao resetar sistema de conquistas:', error);
      throw error;
    }
  }

  /**
   * Resetar apenas os pontos/XP (mant√©m conquistas desbloqueadas)
   */
  static async resetPointsOnly(): Promise<void> {
    try {
      console.log('üîÑ Resetando apenas pontos/XP...');

      // Resetar progresso das conquistas
      await EnhancedAchievementService.resetAchievements();
      console.log('‚úÖ Progresso das conquistas resetado');

      // Resetar pontos no perfil
      await this.resetProfilePoints();
      console.log('‚úÖ Pontos do perfil resetados');

      console.log('üéâ Pontos/XP resetados! Conquistas mant√™m status de desbloqueio.');

    } catch (error) {
      console.error('‚ùå Erro ao resetar pontos:', error);
      throw error;
    }
  }

  /**
   * Resetar apenas o status de visualiza√ß√£o (todas as conquistas desbloqueadas voltam a aparecer como bloqueadas)
   */
  static async resetViewStatusOnly(): Promise<void> {
    try {
      console.log('üîÑ Resetando status de visualiza√ß√£o...');

      // Limpar hist√≥rico de visualiza√ß√µes
      await AchievementViewService.clearViewHistory();
      console.log('‚úÖ Hist√≥rico de visualiza√ß√µes limpo');

      console.log('üéâ Status de visualiza√ß√£o resetado! Todas as conquistas desbloqueadas aparecer√£o como novas novamente.');

    } catch (error) {
      console.error('‚ùå Erro ao resetar status de visualiza√ß√£o:', error);
      throw error;
    }
  }

  /**
   * Resetar pontos no perfil do usu√°rio
   */
  private static async resetProfilePoints(): Promise<void> {
    try {
      const profile = await EnhancedProfileService.getProfile();

      if (profile) {
        // Resetar campos relacionados a pontos/conquistas
        const updatedProfile = {
          ...profile,
          totalPoints: 0,
          achievementPoints: 0,
          experiencePoints: 0,
          level: 1,
          // Manter outros campos intactos
        };

        await EnhancedProfileService.updateProfile(updatedProfile);
        console.log('‚úÖ Pontos do perfil resetados para 0');
      } else {
        console.log('‚ÑπÔ∏è Perfil n√£o encontrado - pulando reset de pontos');
      }
    } catch (error) {
      console.error('‚ùå Erro ao resetar pontos do perfil:', error);
      // N√£o lan√ßar erro - continuar com o reset
    }
  }

  /**
   * Obter estat√≠sticas antes do reset (para confirma√ß√£o)
   */
  static async getResetStats(): Promise<{
    totalAchievements: number;
    unlockedAchievements: number;
    totalPoints: number;
    viewedAchievements: number;
  }> {
    try {
      // Obter estat√≠sticas das conquistas
      const achievementStats = await EnhancedAchievementService.getAchievementStats();

      // Obter estat√≠sticas de visualiza√ß√£o
      const viewStats = await AchievementViewService.getViewStats();

      return {
        totalAchievements: achievementStats.total,
        unlockedAchievements: achievementStats.unlocked,
        totalPoints: achievementStats.totalPoints,
        viewedAchievements: viewStats.totalViewed,
      };
    } catch (error) {
      console.error('‚ùå Erro ao obter estat√≠sticas:', error);
      return {
        totalAchievements: 0,
        unlockedAchievements: 0,
        totalPoints: 0,
        viewedAchievements: 0,
      };
    }
  }

  /**
   * Reset seletivo - escolher quais conquistas resetar
   */
  static async resetSpecificAchievements(achievementIds: string[]): Promise<void> {
    try {
      console.log(`üîÑ Resetando conquistas espec√≠ficas: ${achievementIds.join(', ')}`);

      // Obter progresso atual
      const currentProgress = await EnhancedAchievementService.getAchievementProgress();

      // Resetar progresso das conquistas espec√≠ficas
      const updatedProgress = currentProgress.map(progress => {
        if (achievementIds.includes(progress.achievementId)) {
          return {
            ...progress,
            currentProgress: 0,
            unlockedAt: undefined,
          };
        }
        return progress;
      });

      // Salvar progresso atualizado
      await AsyncStorage.setItem('@VersoEMusa:achievements_v2', JSON.stringify(updatedProgress));

      // Limpar visualiza√ß√µes dessas conquistas espec√≠ficas
      const views = await AsyncStorage.getItem('achievement_views');
      if (views) {
        const parsedViews = JSON.parse(views);
        achievementIds.forEach(id => {
          delete parsedViews[`${id}_default`];
        });
        await AsyncStorage.setItem('achievement_views', JSON.stringify(parsedViews));
      }

      console.log(`‚úÖ ${achievementIds.length} conquistas espec√≠ficas resetadas`);

    } catch (error) {
      console.error('‚ùå Erro ao resetar conquistas espec√≠ficas:', error);
      throw error;
    }
  }
}

// Fun√ß√µes de conveni√™ncia para uso no console/debug
export const resetAllAchievements = () => AchievementResetService.resetEntireAchievementSystem();
export const resetPoints = () => AchievementResetService.resetPointsOnly();
export const resetViews = () => AchievementResetService.resetViewStatusOnly();
export const getResetStats = () => AchievementResetService.getResetStats();
export const resetSpecific = (ids: string[]) => AchievementResetService.resetSpecificAchievements(ids);
